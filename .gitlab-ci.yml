# https://hub.docker.com/r/library/node/tags/
image: node:6.11

# https://hub.docker.com/r/library/postgres/tags/
services:
  - postgres:9.6.2-alpine

variables:
  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: gmnst_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  # DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/$POSTGRES_DB"
  DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"

stages:
  - build
  - test
  - deploy

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - node_modules/

before_script:
  - echo "deb http://packages.cloud.google.com/apt cloud-sdk-jessie main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list
  - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  - apt-get update && apt-get install google-cloud-sdk

after_script:
  - rm /tmp/$CI_PIPELINE_ID.json

# connect:
#   stage: connect
#   image: postgres:9.6.2-alpine
#   script:
#     # official way to provide password to psql: http://www.postgresql.org/docs/9.3/static/libpq-envars.html
#     - export PGPASSWORD=$POSTGRES_PASSWORD
#     - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -c "SELECT 'OK' AS status;"

build:
  stage: build
  script:
    - npm install --quiet

test_server:
  stage: test
  script:
    - npm run knex:migrate
    - npm run knex:seed
    - npm run test:server

deploy_production:
  stage: deploy
  environment: Production
  only:
    - master
  variables:
    DATABASE_URL: $DATABASE_URL_PROD
  script:
    - echo $DEPLOY_KEY_FILE_PRODUCTION > /tmp/$CI_PIPELINE_ID.json
    - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
    - gcloud --quiet --project $PROJECT_ID_PRODUCTION app deploy

# test_db:
#   stage: test
#   services:
#     - postgres:9.5.0
#   script:
#    - npm install
#    - node ./specs/start.js ./specs/db-postgres.spec.js
#   tags:
#     - docker
